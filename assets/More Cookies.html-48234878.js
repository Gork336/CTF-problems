import{_ as t,r as e,o,c as p,a as n,b as s,d as c,e as i}from"./app-d4f08b22.js";const l={},u=n("h4",{id:"hint",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#hint","aria-hidden":"true"},"#"),s(" hint:")],-1),r={href:"https://en.wikipedia.org/wiki/Homomorphic_encryption",target:"_blank",rel:"noopener noreferrer"},k=i(`<p>https://ctftime.org/writeup/27021</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64decode
<span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64encode
<span class="token keyword">import</span> requests


<span class="token keyword">def</span> <span class="token function">bitFlip</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> bit<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    raw <span class="token operator">=</span> b64decode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>

    list1 <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span>
    list1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> list1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">^</span> bit
    raw <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>
    encoded <span class="token operator">=</span> b64encode<span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> encoded


ck <span class="token operator">=</span> <span class="token string">&quot;dHZQVm1HWFBwZ1NoN2tTSHJ1NmVRMUpYY2JDSktpRVAvMCtObjc0WGlIWWEwNU1GYktmdmtYdUVPZ3VTWkNUbmVOM1J3bndFYjBBRkxWdVZXQWd6VFhPWTFRSEVJcG8xSm9kN1ArdFhFMzBoUWE5NFhCajZ2bkpWNWg3TUlnQlE=&quot;</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span>
        c <span class="token operator">=</span> bitFlip<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> ck<span class="token punctuation">)</span>
        cookies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;auth_name&quot;</span><span class="token punctuation">:</span> c<span class="token punctuation">}</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;http://mercury.picoctf.net:25992/&quot;</span><span class="token punctuation">,</span> cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">&quot;picoCTF{&quot;</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
            <span class="token keyword">break</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function d(v,m){const a=e("ExternalLinkIcon");return o(),p("div",null,[u,n("p",null,[n("a",r,[s("https://en.wikipedia.org/wiki/Homomorphic_encryption"),c(a)]),s(" The search endpoint is only helpful for telling you if you are admin or not, you won't be able to guess the flag name")]),k])}const h=t(l,[["render",d],["__file","More Cookies.html.vue"]]);export{h as default};
