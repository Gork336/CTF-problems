import{_ as e,r as t,o as p,c as o,a as n,b as s,d as l,e as c}from"./app-b1c518ef.js";const i={},u=c(`<p>#PHP #代码审计 #文件包含</p><p>HTML 注释里提示有 source.php 查看 source.php</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">emmm</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">checkFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;source&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;source.php&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;hint&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;hint.php&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;you can&#39;t see it&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>
            <span class="token variable">$page</span><span class="token punctuation">,</span>
            <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;?&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;?&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>
            <span class="token variable">$_page</span><span class="token punctuation">,</span>
            <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;?&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;?&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;you can&#39;t see it&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>
    <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;file&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;file&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;&amp;</span> <span class="token class-name static-context">emmm</span><span class="token operator">::</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;file&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;file&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&lt;img src=\\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\\&quot; /&gt;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们期望在 checkFile 返回 true</p><ol><li>file=source.php 或 file=hint,php</li><li>先给 file 后面加一个 ？ ，file 中第一个问号之前的内容满足 1</li></ol><div class="language-url line-numbers-mode" data-ext="url"><pre class="language-url"><code><span class="token query"><span class="token query-delimiter">?</span><span class="token pair"><span class="token key">file</span>=<span class="token value">hint.php</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>回显 flag not here, and flag in ffffllllaaaagggg 尝试得出 payload：</p><div class="language-url line-numbers-mode" data-ext="url"><pre class="language-url"><code><span class="token query"><span class="token query-delimiter">?</span><span class="token pair"><span class="token key">file</span>=<span class="token value">source.php?../../../../../ffffllllaaaagggg</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">mb_substr</span><span class="token punctuation">(</span>
    <span class="token keyword type-hint">string</span> <span class="token variable">$string</span><span class="token punctuation">,</span>
    <span class="token keyword type-hint">int</span> <span class="token variable">$start</span><span class="token punctuation">,</span>
    <span class="token operator">?</span><span class="token keyword type-hint">int</span> <span class="token variable">$length</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">,</span>
    <span class="token operator">?</span><span class="token keyword type-hint">string</span> <span class="token variable">$encoding</span> <span class="token operator">=</span> <span class="token constant">null</span>
<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>
 获取部分字符串
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>string : 从该  string  中提取子字符串。</li><li>start : 如果  <code>start</code>  不是负数，返回的字符串会从  <code>string</code>  第  <code>start</code>  的位置开始，从 0 开始计数。举个例子，字符串 &#39;<code>abcdef</code>&#39;，位置  <code>0</code>  的字符是 &#39;<code>a</code>&#39;，位置  <code>2</code>  的字符是 &#39;<code>c</code>&#39;，以此类推。如果  <code>start</code>  是负数，返回的字符串是从  <code>string</code>  末尾处第  <code>start</code>  个字符开始的。</li><li>length : <code>string</code>  中要使用的最大字符数。如果省略了此参数或者传入了  <code>NULL</code>，则会提取到字符串的尾部。</li><li>encoding : <code>encoding</code>  参数为字符编码。如果省略或是  <strong><code>null</code></strong>，则使用内部字符编码。</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">mb_strpos</span><span class="token punctuation">(</span>
    <span class="token keyword type-declaration">string</span> <span class="token string backtick-quoted-string">\`$haystack\`</span><span class="token punctuation">,</span>
    <span class="token keyword type-declaration">string</span> <span class="token string backtick-quoted-string">\`$needle\`</span><span class="token punctuation">,</span>
    <span class="token keyword type-declaration">int</span> <span class="token string backtick-quoted-string">\`$offset\`</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token operator">?</span><span class="token keyword type-declaration">string</span> <span class="token string backtick-quoted-string">\`$encoding\`</span> <span class="token operator">=</span> <span class="token operator">**</span><span class="token string backtick-quoted-string">\`null\`</span><span class="token operator">**</span>
<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>
查找字符串在另一个字符串中首次出现的位置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),r=n("li",null,"haystack : 要被检查的  string。",-1),d=n("code",null,"haystack",-1),k={href:"https://www.php.net/manual/zh/function.strpos.php",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,"offset : 搜索位置的偏移。如果没有提供该参数，将会使用 0。负数的 offset 会从字符串尾部开始统计。",-1),b=n("li",null,[s("encoding : "),n("code",null,"encoding"),s("  参数为字符编码。如果省略或是  "),n("strong",null,[n("code",null,"null")]),s("，则使用内部字符编码。")],-1);function g(m,h){const a=t("ExternalLinkIcon");return p(),o("div",null,[u,n("ul",null,[r,n("li",null,[s("needle : 在  "),d,s("  中查找这个字符串。 和  "),n("a",k,[s("strpos()"),l(a)]),s("  不同的是，数字的值不会被当做字符的顺序值。")]),v,b])])}const y=e(i,[["render",g],["__file","Warmup.html.vue"]]);export{y as default};
